***pplisting_room.py
import csv
import os
import psycopg2


def populate_listings_and_rooms(csv_file_path: str, db_name: str, db_user: str, db_password: str):
    """
    Populate the 'listings' and 'room' tables from the CSV file using pure SQL with psycopg2.

    Mapping (according to your specification):
    - 'listings' table:
        listing_id -> airbnb_id
        name -> airbnb_name
        price -> price
        host_id -> host_id
        neighbourhood -> neigh_num (foreign key to neighbourhood)
    - 'room' table:
        listing_id -> airbnb_id (foreign key to listings)
        host_id -> host_id
        room_type -> room_type
    """

    try:
        # Connect to the PostgreSQL database
        conn = psycopg2.connect(dbname=db_name, user=db_user, password=db_password)
        cur = conn.cursor()

        with open(csv_file_path, newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            rows_processed = 0
            new_listings = 0
            new_rooms = 0

            for row in reader:
                rows_processed += 1

                # Extract required fields from each row:
                try:
                    airbnb_id = int(row["listing_id"])
                    airbnb_name = row["name"].strip()
                    price = int(row["price"])
                    host_id = int(row["host_id"])
                    neigh_num = int(row["neighbourhood"])  # Foreign key to 'neighbourhood'
                    room_type = row["room_type"].strip()

                except (ValueError, KeyError) as e:
                    print(f"Skipping row {rows_processed}: Unable to parse required fields ({e})")
                    continue

                # 1) Create or Skip Listing (using INSERT ... SELECT ... EXISTS)
                cur.execute("""
                    INSERT INTO listings (airbnb_id, airbnb_name, price, host_id, neigh_num)
                    SELECT %s, %s, %s, %s, %s
                    WHERE NOT EXISTS (SELECT 1 FROM listings WHERE airbnb_id = %s);
                """, (airbnb_id, airbnb_name, price, host_id, neigh_num, airbnb_id))
                new_listings += cur.rowcount

                # 2) Create or Skip Room (using INSERT ... SELECT ... EXISTS)
                cur.execute("""
                    INSERT INTO room (airbnb_id, host_id, room_type)
                    SELECT %s, %s, %s
                    WHERE NOT EXISTS (SELECT 1 FROM room WHERE airbnb_id = %s);
                """, (airbnb_id, host_id, room_type, airbnb_id))
                new_rooms += cur.rowcount

        # Commit all changes after processing the CSV
        conn.commit()
        print(f"Processed {rows_processed} rows.")
        print(f"New listings added: {new_listings}")
        print(f"New rooms added: {new_rooms}")

    except FileNotFoundError:
        print(f"CSV file not found: {csv_file_path}")
    except (psycopg2.Error, Exception) as e:
        print(f"An error occurred: {e}")
        conn.rollback() if conn else None  # Rollback if connection was established
    finally:
        if cur:
            cur.close()
        if conn:
            conn.close()


if __name__ == "__main__":

    csv_file_path = "/home/avishan/Documents/project/finallisting.csv"
    db_name = "finder"
    db_user = "avishan"
    db_password = "shittypeople"  # Replace with your actual password

    if not os.path.isfile(csv_file_path):
        print(f"CSV file does not exist: {csv_file_path}")
    else:
        populate_listings_and_rooms(csv_file_path, db_name, db_user, db_password)
***tables.sql
CREATE TABLE neighborhood (
    neigh_num INTEGER PRIMARY KEY,
    neigh_name VARCHAR(255),
    rank INTEGER
);

CREATE TABLE listings (
    airbnb_id INTEGER PRIMARY KEY,
    airbnb_name VARCHAR(255),
    price INTEGER,
    host_id INTEGER,
    neigh_num INTEGER,
    FOREIGN KEY (neigh_num) REFERENCES neighborhood(neigh_num)
);


CREATE TABLE room (
    host_id INTEGER,
    room_type VARCHAR(255),
    airbnb_id INTEGER PRIMARY KEY,
    availibility BOOLEAN,
    check_in DATE,
    check_out DATE,
    FOREIGN KEY (airbnb_id) REFERENCES listings(airbnb_id)
);

***ppneigh.py
import csv
import os
import psycopg2


def populate_neighbourhoods(csv_file_path: str, dbname: str, user: str, password: str):
    """
    Populate the neighbourhood table with data from a CSV file using psycopg2.

    Args:
        csv_file_path: Path to the CSV file containing neighbourhood data.
        dbname: Name of the database to connect to.
        user: Username for database access.
        password: Password for database access.
    """

    try:
        # Connect to the PostgreSQL database
        conn = psycopg2.connect(dbname=dbname, user=user, password=password)
        cur = conn.cursor()

        # Open the CSV file
        with open(csv_file_path, newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            entries_added = 0
            entries_skipped = 0

            # Process each row in the CSV file
            for row in reader:
                try:
                    neigh_num = int(row['neigh_num'])
                    neigh_name = row['neighbourhood'].strip()
                    rank = int(row['rank'])

                    # Check if the neighbourhood already exists
                    cur.execute("SELECT * FROM Neighborhood WHERE neigh_num = %s", (neigh_num,))
                    existing = cur.fetchone()

                    if existing:
                        print(f"Neighbourhood with neigh_num {neigh_num} already exists. Skipping.")
                        entries_skipped += 1
                        continue

                    # Insert new neighbourhood
                    sql = """
                        INSERT INTO Neighborhood (neigh_num, neigh_name, rank)
                        VALUES (%s, %s, %s)
                    """
                    cur.execute(sql, (neigh_num, neigh_name, rank))

                    entries_added += 1

                except (ValueError, KeyError) as e:
                    print(f"Error processing row {row}: {e}")
                    entries_skipped += 1
                    continue

        # Commit the changes
        conn.commit()
        print(f"\nPopulation complete: {entries_added} entries added, {entries_skipped} entries skipped.")

    except FileNotFoundError:
        print(f"CSV file not found at {csv_file_path}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        conn.rollback() if conn else None  # Rollback if connection was established
    finally:
        if cur:
            cur.close()
        if conn:
            conn.close()


if __name__ == "__main__":
    # Define file path, database details (replace with yours)
    csv_file_path = '/home/avishan/Documents/project/neighranked.csv'
    dbname = 'finder'
    user = 'avishan'
    password = 'your_password'  # Replace with your actual password

    # Check if CSV file exists
    if not os.path.exists(csv_file_path):
        print(f"CSV file not found at {csv_file_path}")
    else:
        populate_neighbourhoods(csv_file_path, dbname, user, password)

